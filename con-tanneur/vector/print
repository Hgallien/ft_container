void	print_tree()
		{

			// std::cout<<"dans print tree\n";
			int i = 0;
			int tour = 0;
			// std::cout<<"dans print tree1.25"<<head->getKey()<<"\n";
			int space = pow(2,head->height() -1 );

			// std::cout<<"dans print tree1.35\n";
			int vide = 0;
			int v = 1;
			int debug = 0;
			std::queue<node<const Key,T, Allocator>*> n;
			// std::cout<<"dans print tree1.5\n";

			// std::cout<<"dans print tree1.75\n";
			node<const Key,T, Allocator>* temp;

			node<const Key,T, Allocator>* temp_head = head;

			n.push(temp_head);
			node<const Key,T, Allocator>* temp2;
			for (int x = 0 ; x <space ; x++)
			{
				std::cout<<" ";
			}
			while(!n.empty() )//&& debug < 15)
			{

				// std::cout<<"dans print tree2\n";
				debug++;
				temp = n.front();
				n.pop();

				if (temp->getKey() == '*')
					std::cout<<(char)(temp->getKey()); 
				else
					std::cout<<(temp->getKey()); 
				i++;
				if (i != 0 && i == pow(2,tour)/2)
					std::cout<<" ";

				if(i == pow(2,tour))
				{
					if (v == 0)
					{

						std::cout<<"\n";
						return;
					}
					std::cout<<"\n";
					for (int x = 0 ; x <space -pow(2,tour); x++)
					{
						std::cout<<" ";
					}
					tour++;
					i = 0;
					v = 0;
				}
				if (temp->getKey() == '*')
				{
					pair<const char,int> p1('*' , 0);
					temp2 = n_alloc.allocate(1);
					n_alloc.construct(temp2, node<const Key,T,Allocator>(p1));
					n.push(temp2);
					temp2 = n_alloc.allocate(1);
					n_alloc.construct(temp2, node<const Key,T,Allocator>(p1));
					n.push(temp2);
					delete temp;
					continue;
				}
				if(temp->getLeft()!= 0)
				{
					// std::cout<<"dans left ";
					n.push(temp->getLeft());
					if (temp->getKey()!='*')
						v++;
				}
				else
				{
					pair<const char,int> p1('*' , 0);
					temp2 = n_alloc.allocate(1);
					n_alloc.construct(temp2, node<const Key,T,Allocator>(p1));
					n.push(temp2);
				}
				if(temp->getRight()!= 0)
				{
					// std::cout<<"dans right ";
					n.push(temp->getRight());
					if (temp->getKey()!='*')
						v++;
				}
				else
				{
					pair<const char,int> p1('*' , 0);
					temp2 = n_alloc.allocate(1);
					n_alloc.construct(temp2, node<const Key,T,Allocator>(p1));
					n.push(temp2);
					// n.push(node<Key,T,Allocator>("*",0));
					vide ++;
				}
				// std::cout<<"v == "<<v<<" ";
			}
			std::cout<<"\n";
		}
